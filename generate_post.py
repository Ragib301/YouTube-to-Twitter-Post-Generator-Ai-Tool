import re
import os
from google import genai
from google.genai import types
from PIL import Image
from io import BytesIO
from api_key import GEMINI_API
from zipfile import ZipFile


client = genai.Client(api_key=GEMINI_API)


def generate_posts(transcript, count):
    prompt = f"""
    Based on this transcript, write {count} separate INSIGHTFUL twitter posts.
    Keep each post interesting and engaging, and detailed a bit. Keep the reference
    of who said that and where he said (in a YouTube podcast). Return each blog
    posts string in a python list, return only the list, nothing else should be
    printed, print in only plain text, no special character needed. Include engaging
    Twitter hashtags.
    Here is the YouTube video full transcript:
    
    {transcript}
    """
    try:
        response = client.models.generate_content(
            model="gemini-2.0-flash", contents=prompt)
        matches = re.findall(r'"(.*?)(?<!\\)"', response.text, re.DOTALL)
        cleaned_matches = [re.sub(r'\s+', ' ', m.strip()) for m in matches]
        return cleaned_matches

    except Exception as e:
        return str(e)


def generate_data(post_list, transcript):
    IMAGE_FOLDER = "Post Contents"
    os.makedirs(IMAGE_FOLDER, exist_ok=True)
    file_path = os.path.join(IMAGE_FOLDER, "post_captions.txt")
    post_data = []

    for i in range(len(post_list)):
        prompt = f"""Generate a suitable image for this Twitter Post Caption.
        Make the image interesting, engaging and SEO-optimized. Make sure the
        image looks like it is not generated by Ai, use only digital art image.
        Don't use twitter post screenshot or any kind of social media statuses.
        Put one or more KEY words only, make sure every text and spelling is correctly 
        written, and it is enough visually able to read. Don't put anything in the image 
        that doesn't make any sense. EXACTLY one image will be generated.
        Here is the post caption:
        
        {post_list[i]}
        """

        response = client.models.generate_content(
            model="gemini-2.0-flash-preview-image-generation",
            contents=prompt,
            config=types.GenerateContentConfig(
                response_modalities=['TEXT', 'IMAGE']
            )
        )
        
        with open(file_path, "a", encoding='utf-8') as file:
            file.write(f"- [Post {i+1}]: {post_list[i]}\n\n")

        image_path = ""
        for part in response.candidates[0].content.parts:
            if part.inline_data is not None:
                image = Image.open(BytesIO((part.inline_data.data)))
                image_path = os.path.join(IMAGE_FOLDER, f"image_{i+1}.png")
                image.save(image_path)

        with ZipFile('output.zip', 'a') as myzip:
            myzip.write(file_path)
            myzip.write(image_path)

        post_dict = {
            'content': post_list[i],
            'image': image_path
        }
        post_data.append(post_dict)

    with open(file_path, "a", encoding='utf-8') as file:
            file.write(f"- [YouTube Transcript]: {transcript}")
    return post_data


if __name__ == "__main__":
    video_url = "https://youtu.be/W4tqbEmplug?si=oZBykixw62l6_E0N"
    transcript = get_youtube_transcript(video_url)
    post_list = generate_posts(transcript, 5)
    post_data = generate_data(post_list, transcript)
    print(post_list, "\n")
    print(post_data)
